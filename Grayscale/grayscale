float getPixelColor(const float pixelColor, const float lumiCoef)
{
    // We can use y = ax + b, where y is the fragment color and x is time
    return ( (pixelColor - lumiCoef) * abs( sin(iTime * 0.3f) ) + lumiCoef  );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 coord2d = fragCoord.xy / iResolution.xy;
    
    vec3 luminosity = vec3(0.2125, 0.7154, 0.0721);
    vec4 textureColor = texture(iChannel0, coord2d.xy);
    float lumiCoef = dot(luminosity, textureColor.xyz);

    // Luminosity coeficient - if you only want black and white
    //textureColor.r = lumiCoef;
    //textureColor.g = lumiCoef;
    //textureColor.b = lumiCoef;
    
    textureColor.r = getPixelColor(textureColor.r, lumiCoef);
    textureColor.g = getPixelColor(textureColor.g, lumiCoef);
    textureColor.b = getPixelColor(textureColor.b, lumiCoef);
    
    normalize(textureColor);
    
    fragColor = textureColor;
}
